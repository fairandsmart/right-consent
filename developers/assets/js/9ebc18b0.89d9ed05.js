"use strict";(self.webpackChunkapi_doc=self.webpackChunkapi_doc||[]).push([[328],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||r;return n?a.createElement(h,s(s({ref:t},u),{},{components:n})):a.createElement(h,s({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},164:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>k,contentTitle:()=>v,default:()=>T,frontMatter:()=>b,metadata:()=>g,toc:()=>C});var a=n(7462),o=n(7294),r=n(3905),s=n(6010),i=n(2389),l=n(7392),c=n(7094),u=n(2466);const p="tabList__CuJ",d="tabItem_LNqP";function m(e){var t;const{lazy:n,block:r,defaultValue:i,values:m,groupId:h,className:f}=e,y=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=m??y.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),v=(0,l.l)(b,((e,t)=>e.value===t.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===i?i:i??(null==(t=y.find((e=>e.props.default)))?void 0:t.props.value)??y[0].props.value;if(null!==g&&!b.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:C}=(0,c.U)(),[N,T]=(0,o.useState)(g),w=[],{blockElementScrollPositionUntilNextRender:O}=(0,u.o5)();if(null!=h){const e=k[h];null!=e&&e!==N&&b.some((t=>t.value===e))&&T(e)}const j=e=>{const t=e.currentTarget,n=w.indexOf(t),a=b[n].value;a!==N&&(O(t),T(a),null!=h&&C(h,String(a)))},x=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=w.indexOf(e.currentTarget)+1;n=w[t]??w[0];break}case"ArrowLeft":{const t=w.indexOf(e.currentTarget)-1;n=w[t]??w[w.length-1];break}}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,s.Z)("tabs-container",p)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":r},f)},b.map((e=>{let{value:t,label:n,attributes:r}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>w.push(e),onKeyDown:x,onFocus:j,onClick:j},r,{className:(0,s.Z)("tabs__item",d,null==r?void 0:r.className,{"tabs__item--active":N===t})}),n??t)}))),n?(0,o.cloneElement)(y.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function h(e){const t=(0,i.Z)();return o.createElement(m,(0,a.Z)({key:String(t)},e))}const f="tabItem_Ymn6";function y(e){let{children:t,hidden:n,className:a}=e;return o.createElement("div",{role:"tabpanel",className:(0,s.Z)(f,a),hidden:n},t)}const b={},v="Transactions",g={unversionedId:"concepts/transactions",id:"concepts/transactions",title:"Transactions",description:"In this section, we will learn about creating and displaying consent transactions.",source:"@site/docs/02-concepts/201-transactions.mdx",sourceDirName:"02-concepts",slug:"/concepts/transactions",permalink:"/developers/docs/concepts/transactions",draft:!1,tags:[],version:"current",sidebarPosition:201,frontMatter:{},sidebar:"docSidebar",previous:{title:"Models",permalink:"/developers/docs/concepts/models"},next:{title:"Subjects",permalink:"/developers/docs/concepts/subjects"}},k={},C=[{value:"Step 1 : Creating a transaction",id:"step-1--creating-a-transaction",level:2},{value:"Subject",id:"subject",level:3},{value:"Layout",id:"layout",level:3},{value:"Creating the transaction",id:"creating-the-transaction",level:3},{value:"Step 2 : Displaying the Consent Form",id:"step-2--displaying-the-consent-form",level:2},{value:"Optional : Manually sending the consent values",id:"optional--manually-sending-the-consent-values",level:2}],N={toc:C};function T(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},N,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"transactions"},"Transactions"),(0,r.kt)("p",null,"In this section, we will learn about creating and displaying consent transactions."),(0,r.kt)("p",null,"Consents are sent to the end-user using our Consent Form. To generate a Consent Form, you first need to generate a consent transaction using a ",(0,r.kt)("inlineCode",{parentName:"p"},"ConsentContext"),"."),(0,r.kt)("h2",{id:"step-1--creating-a-transaction"},"Step 1 : Creating a transaction"),(0,r.kt)("p",null,"The first step of a transaction is to generate a ",(0,r.kt)("strong",{parentName:"p"},"Consent Context"),". A context holds all the information needed to generate a consent form."),(0,r.kt)("h3",{id:"subject"},"Subject"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"subject")," of a transaction is a unique identifier used to represent an individual. It can be anything from an internal id, a name, a phone number, an email address, a social security number, a passport number, etc. It is used to identify the end-user and to link the consent to them."),(0,r.kt)("p",null,"When you create another transaction with the same subject, the Consent Manager will be able to retrieve this subject's previous consents and display them in the consent form."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"See the ",(0,r.kt)("a",{parentName:"p",href:"subjects"},"Subject documentation")," for more information.")),(0,r.kt)("h3",{id:"layout"},"Layout"),(0,r.kt)("p",null,"A ",(0,r.kt)("strong",{parentName:"p"},"layout")," is a set of options that will tell the Consent Manager how to display the consent form and which ",(0,r.kt)("a",{parentName:"p",href:"models"},"data models")," to display. It is used to customize the look and feel of the consent form."),(0,r.kt)("p",null,"In the ",(0,r.kt)("strong",{parentName:"p"},"ConsentContext"),", you can specify the ",(0,r.kt)("inlineCode",{parentName:"p"},"layout")," field. It must be the id of a custom layout. You can create custom layouts using the Consent Manager GUI and save them through the API."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you don't want to create a custom layout, you can specify the layout you want in the ",(0,r.kt)("inlineCode",{parentName:"p"},"layoutData")," field of the ",(0,r.kt)("strong",{parentName:"p"},"ConsentContext"))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You must set ",(0,r.kt)("strong",{parentName:"p"},"either")," the ",(0,r.kt)("inlineCode",{parentName:"p"},"layout")," or the ",(0,r.kt)("inlineCode",{parentName:"p"},"layoutData")," field. Not both.")),(0,r.kt)("h3",{id:"creating-the-transaction"},"Creating the transaction"),(0,r.kt)("p",null,"To create the transation, you must send your ",(0,r.kt)("strong",{parentName:"p"},"ConsentContext")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"/consents")," endpoint using a ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," request. The response will contain the id of the transaction."),(0,r.kt)(h,{mdxType:"Tabs"},(0,r.kt)(y,{value:"http",label:"curl",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http"},'curl -d "CONSENT_CONTEXT" -H "Authorization: Bearer TOKEN" -X POST https://localhost:4287/consents\n'))),(0,r.kt)(y,{value:"js",label:"Consent.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { ConsentsResource } from '@fairandsmart/consents-ce';\n\nconst consentContext = { ... };\n\nConsentsResource.createTransactionJson(consentContext)\n    .subscribe((transactionId) => {\n        // Do something with the transaction\n    });\n"))),(0,r.kt)(y,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"")))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"For the API Reference, check the ",(0,r.kt)("a",{parentName:"p",href:"/apiReference#tag/Consent"},"/consents resource"))),(0,r.kt)("h2",{id:"step-2--displaying-the-consent-form"},"Step 2 : Displaying the Consent Form"),(0,r.kt)("p",null,"Once you have the transaction id, you can display the consent form to the end-user. The Consent Form is a web page that you can embed in your application."),(0,r.kt)("p",null,"The url to this form is location in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Location")," header of the response from the ",(0,r.kt)("inlineCode",{parentName:"p"},"Creating the transaction")," request."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can also reconstruct the url using the transaction id like so : ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /consents/{txid}/submit"))),(0,r.kt)("h2",{id:"optional--manually-sending-the-consent-values"},"Optional : Manually sending the consent values"),(0,r.kt)("p",null,"In some cases, you will want to update values for a consent without displaying the built-in form. To do this, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"POST /consents/{txid}/submit")," endpoint (",(0,r.kt)("a",{parentName:"p",href:"/apiReference#tag/Consent/paths/~1consents~1%7Btxid%7D~1submit/post"},"see reference"),")."))}T.isMDXComponent=!0}}]);