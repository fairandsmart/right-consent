---
openapi: 3.0.3
info:
  title: Right Consents Community API
  description: Right Consents Community Open-API documentation.
  contact:
    name: Development team
    url: https://www.fairandsmart.com
    email: info@fairandsmart.com
  license:
    name: GPL (GNU General Public License) version 3
    url: https://www.gnu.org/licenses/lgpl-3.0.en.html
  version: dev-version (DEV / en)
tags:
- name: Consent
  description: Operations related to consent collect are enclosed in a transaction.
- name: Counters
  description: Counters metrics
- name: Keys
  description: Operations related to API access keys
- name: Models
  description: Operations related to content models management
- name: Receipts
  description: Operations related to Consent Receipts
- name: Records
  description: Operations related to Consent Records
- name: Statistics
  description: Operations related to statistics
- name: Subjects
  description: Operations related to subjects
- name: System
  description: System operations
- name: Tokens
  description: Access Token generation
- name: User
  description: Connected user resource
- name: Webhook
  description: Webhook resource
paths:
  /consents:
    post:
      tags:
      - Consent
      parameters:
      - name: Accept-Language
        in: header
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentContext'
      responses:
        "200":
          description: OK
  /consents/preview:
    post:
      tags:
      - Consent
      summary: Generate the consent submission form for the given transaction
      parameters:
      - name: Accept-Language
        in: header
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentContext'
      responses:
        "200":
          description: submission form representation
          content:
            text/html:
              example: submission form HTML representation
  /consents/{txid}:
    get:
      tags:
      - Consent
      parameters:
      - name: txid
        in: path
        required: true
        schema:
          type: string
      - name: Accept-Language
        in: header
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentTransaction'
  /consents/{txid}/cancel:
    post:
      tags:
      - Consent
      parameters:
      - name: txid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /consents/{txid}/child:
    get:
      tags:
      - Consent
      parameters:
      - name: txid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    post:
      tags:
      - Consent
      parameters:
      - name: txid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /consents/{txid}/confirm:
    get:
      tags:
      - Consent
      summary: Generate the consent confirmation form for the given transaction
      parameters:
      - name: txid
        in: path
        required: true
        schema:
          type: string
      - name: Accept-Language
        in: header
        schema:
          type: string
      responses:
        "200":
          description: confirmation form representation
          content:
            text/html:
              example: confirmation form HTML representation
            application/json:
              example: confirmation form JSON representation
        "401":
          description: token is either invalid or missing
    post:
      tags:
      - Consent
      parameters:
      - name: txid
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MultivaluedMapStringString'
          application/json:
            schema:
              $ref: '#/components/schemas/MultivaluedMapStringString'
      responses:
        "200":
          description: OK
  /consents/{txid}/submit:
    get:
      tags:
      - Consent
      summary: Generate the consent submission form for the given transaction
      parameters:
      - name: txid
        in: path
        required: true
        schema:
          type: string
      - name: Accept-Language
        in: header
        schema:
          type: string
      responses:
        "200":
          description: submission form representation
          content:
            text/html:
              example: submission form HTML representation
            application/json:
              example: submission form JSON representation
        "401":
          description: token is either invalid or missing
    post:
      tags:
      - Consent
      parameters:
      - name: txid
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MultivaluedMapStringString'
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
      responses:
        "200":
          description: OK
  /counters/transaction:
    get:
      tags:
      - Counters
      summary: Get the Transaction count between timestamp interval
      parameters:
      - name: from
        in: query
        description: timestamp when to start counting
        schema:
          format: int64
          default: 0
          type: integer
      - name: to
        in: query
        description: timestamp when to stop counting
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: Transaction counter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CounterDto'
  /keys:
    get:
      tags:
      - Keys
      summary: List of all available API access keys
      responses:
        "401":
          description: "Access token is invalid, expired, missing or lacks some role"
        "200":
          description: The list of all keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Key'
      security:
      - access token:
        - profile
    post:
      tags:
      - Keys
      summary: Create a new API access key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Key'
      responses:
        "401":
          description: "Access token is invalid, expired, missing or lacks some role"
        "200":
          description: The created key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
      security:
      - access token:
        - profile
  /keys/{id}:
    delete:
      tags:
      - Keys
      summary: Delete the key with that id
      parameters:
      - name: id
        in: path
        description: The key UUID (NOT its name) to delete
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
        example: 00000000-0000-0000-0000-000000000000
      responses:
        "401":
          description: "Access token is invalid, expired, missing or lacks some role"
        "204":
          description: The key has been deleted
      security:
      - access token:
        - profile
  /models:
    get:
      tags:
      - Models
      summary: List of all available models
      description: ⚠️ results are paginated
      parameters:
      - name: direction
        in: query
        description: sort direction (asc/desc)
        schema:
          default: asc
          type: string
      - name: keys
        in: query
        description: model IDs to query
        schema:
          type: array
          items:
            type: string
      - name: keyword
        in: query
        description: keyword to query
        schema:
          type: string
      - name: languages
        in: query
        description: languages to query
        schema:
          type: array
          items:
            type: string
      - name: limit
        in: query
        description: page limit
        schema:
          format: int32
          default: 0
          type: integer
        deprecated: true
      - name: offset
        in: query
        description: offset to apply
        schema:
          format: int32
          default: -1
          type: integer
        deprecated: true
      - name: order
        in: query
        description: sort by
        schema:
          default: key
          type: string
      - name: page
        in: query
        description: page number to get
        schema:
          format: int32
          default: 0
          type: integer
      - name: size
        in: query
        description: page size
        schema:
          format: int32
          default: 25
          type: integer
      - name: statuses
        in: query
        description: statuses to query
        schema:
          type: array
          items:
            $ref: '#/components/schemas/Status2'
      - name: tags
        in: query
        description: tags to query
        schema:
          type: array
          items:
            type: string
      - name: types
        in: query
        description: model types to query
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: The list of all keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionPageModelEntryDto'
    post:
      tags:
      - Models
      summary: Create model
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelEntryDto'
      responses:
        "200":
          description: The model has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelEntryDto'
        "401":
          description: Account lacks 'roles.admin' role
        "409":
          description: A model with the same key already exists
      security:
      - access token:
        - profile
  /models/defaultinfo:
    post:
      tags:
      - Models
      summary: Set default informations
      parameters:
      - name: form
        in: query
        description: the key of the information model for forms
        schema:
          type: string
        example: information.001
      - name: operator
        in: query
        description: the key of the information model for operators actions
        schema:
          type: string
        example: information.001
      - name: user
        in: query
        description: the key of the information model for users actions
        schema:
          type: string
        example: information.001
      responses:
        "200":
          description: The default informations have been set
        "401":
          description: Account lacks 'roles.admin' role
        "404":
          description: the model has not been found
      security:
      - access token:
        - profile
  /models/import:
    post:
      tags:
      - Models
      summary: Import model
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelEntryExportDto'
      responses:
        "200":
          description: The model has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelEntryDto'
        "401":
          description: Account lacks 'roles.admin' role
        "409":
          description: A model with the same key already exists
      security:
      - access token:
        - profile
  /models/serials/{sid}/data:
    get:
      tags:
      - Models
      summary: Get the data for a given model serial
      parameters:
      - name: sid
        in: path
        description: the requested model serial
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      - name: locale
        in: query
        description: the locale to get data for
        schema:
          type: string
        example: fr
      responses:
        "200":
          description: the data have been given
        "404":
          description: the model has not been found
  /models/{id}:
    get:
      tags:
      - Models
      summary: Get model
      parameters:
      - name: id
        in: path
        description: the model ID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      responses:
        "200":
          description: The model has been retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelEntryDto'
        "401":
          description: Account lacks 'roles.operator' role
        "404":
          description: The model has not been found
      security:
      - access token:
        - profile
    put:
      tags:
      - Models
      summary: Update model
      parameters:
      - name: id
        in: path
        description: the model ID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelEntryDto'
      responses:
        "200":
          description: The model has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelEntryDto'
        "401":
          description: Account lacks 'roles.admin' role
        "404":
          description: The model has not been found
      security:
      - access token:
        - profile
    delete:
      tags:
      - Models
      summary: Delete model
      parameters:
      - name: id
        in: path
        description: the model ID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      responses:
        "200":
          description: The model has been deleted
        "401":
          description: Account lacks 'roles.admin' role
        "404":
          description: The model has not been found
      security:
      - access token:
        - profile
  /models/{id}/export:
    get:
      tags:
      - Models
      summary: Export model
      parameters:
      - name: id
        in: path
        description: the requested model UUID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      responses:
        "200":
          description: the data have been given
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelEntryExportDto'
        "404":
          description: the model or version has not been found
  /models/{id}/versions:
    get:
      tags:
      - Models
      summary: Get all versions for a given model
      parameters:
      - name: id
        in: path
        description: the model ID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      responses:
        "200":
          description: The model versions have been retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModelVersionDtoLight'
        "404":
          description: The model has not been found
    post:
      tags:
      - Models
      summary: Create new version for a given model
      parameters:
      - name: id
        in: path
        description: the model ID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelVersionDto'
      responses:
        "200":
          description: The model version has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersionDto'
        "401":
          description: Account lacks 'roles.admin' role
      security:
      - access token:
        - profile
  /models/{id}/versions/active:
    get:
      tags:
      - Models
      summary: Redirect to the active version of a model
      parameters:
      - name: id
        in: path
        description: the model ID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      responses:
        "303":
          description: Go to the new location
        "404":
          description: The model has not been found
  /models/{id}/versions/latest:
    get:
      tags:
      - Models
      summary: Redirect to the latest version of a model
      parameters:
      - name: id
        in: path
        description: the model ID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      responses:
        "303":
          description: Go to the new location
        "404":
          description: The model has not been found
  /models/{id}/versions/{vid}:
    get:
      tags:
      - Models
      summary: Get a given version of a given model
      parameters:
      - name: id
        in: path
        description: the requested model UUID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      - name: vid
        in: path
        description: the requested version UUID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      responses:
        "200":
          description: here is the requested version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersionDto'
        "404":
          description: the model or version has not been found
    put:
      tags:
      - Models
      summary: Update a given version of a given model
      description: only works with latest version
      parameters:
      - name: id
        in: path
        description: the requested model UUID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      - name: vid
        in: path
        description: the requested version UUID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelVersionDto'
      responses:
        "200":
          description: the version has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersionDto'
        "404":
          description: the model or version has not been found
        "401":
          description: Account lacks 'roles.admin' role
      security:
      - access token:
        - profile
    delete:
      tags:
      - Models
      summary: Generate a given version of a given model
      parameters:
      - name: id
        in: path
        description: the requested model UUID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      - name: vid
        in: path
        description: the requested version UUID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      responses:
        "204":
          description: the version has been deleted
        "404":
          description: the model or version has not been found
        "401":
          description: Account lacks 'roles.admin' role
      security:
      - access token:
        - profile
  /models/{id}/versions/{vid}/data:
    get:
      tags:
      - Models
      summary: Get the data for a given version of a given model
      parameters:
      - name: id
        in: path
        description: the requested model UUID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      - name: vid
        in: path
        description: the requested version UUID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      - name: locale
        in: query
        description: the locale to get data for
        schema:
          type: string
        example: fr
      responses:
        "200":
          description: the data have been given
        "404":
          description: the model or version has not been found
  /models/{id}/versions/{vid}/preview:
    post:
      tags:
      - Models
      summary: Generate the preview for a given version of a given model
      parameters:
      - name: id
        in: path
        description: the requested model UUID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      - name: vid
        in: path
        description: the requested version UUID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreviewDto'
      responses:
        "200":
          description: the preview has been generated
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/TemplateModel'
        "404":
          description: the model or version has not been found
  /models/{id}/versions/{vid}/status:
    put:
      tags:
      - Models
      summary: Change a given version's status of a given model
      parameters:
      - name: id
        in: path
        description: the requested model UUID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      - name: vid
        in: path
        description: the requested version UUID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelVersionStatusDto'
      responses:
        "200":
          description: the status has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersionDto'
        "404":
          description: the model or version has not been found
        "401":
          description: Account lacks 'roles.admin' role
      security:
      - access token:
        - profile
  /models/{id}/versions/{vid}/type:
    put:
      tags:
      - Models
      summary: Change a given version's type of a given model
      parameters:
      - name: id
        in: path
        description: the requested model UUID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      - name: vid
        in: path
        description: the requested version UUID
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelVersionTypeDto'
      responses:
        "200":
          description: the type has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersionDto'
        "404":
          description: the model or version has not been found
        "401":
          description: Account lacks 'roles.admin' role
      security:
      - access token:
        - profile
  /receipts/{tid}:
    get:
      tags:
      - Receipts
      summary: Get a receipt for that transaction id
      parameters:
      - name: tid
        in: path
        description: The receipt's transaction id
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      - name: format
        in: query
        description: The desired receipt format
        required: true
        schema:
          default: text/html
          minLength: 1
          type: string
          nullable: false
        example: text/plain
      - name: theme
        in: query
        description: The required theme ID
        schema:
          type: string
      responses:
        "404":
          description: "Unable to find the receipt due to un-existing transaction,\
            \ format renderer or theme"
        "401":
          description: "Access token is invalid, expired, missing or lacks some role"
        "200":
          description: receipt has been generated
  /records:
    get:
      tags:
      - Records
      summary: List Records
      description: Records are ordered by element key and chronological order. Records
        status is evaluated at runtime.
      parameters:
      - name: after
        in: query
        description: Minimum submission date to query
        schema:
          format: int64
          default: 0
          type: integer
      - name: before
        in: query
        description: Maximum submission date to query
        schema:
          format: int64
          default: 0
          type: integer
      - name: direction
        in: query
        description: Sort direction (asc/desc)
        schema:
          default: asc
          type: string
      - name: elements
        in: query
        description: Body elements models keys to query
        schema:
          type: array
          items:
            type: string
      - name: infos
        in: query
        description: Information models keys to query
        schema:
          type: array
          items:
            type: string
      - name: order
        in: query
        description: Sort by
        schema:
          default: key
          type: string
      - name: origins
        in: query
        description: Collection origins to query
        schema:
          type: array
          items:
            type: string
      - name: states
        in: query
        description: States to query
        schema:
          type: array
          items:
            $ref: '#/components/schemas/State'
      - name: subject
        in: query
        description: Subject to query
        schema:
          type: string
        example: sheldon
      - name: value
        in: query
        description: Value to query
        schema:
          type: string
      responses:
        "200":
          description: A Map of all subject Records ordered by key
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    $ref: '#/components/schemas/Record'
        "401":
          description: Account lacks 'roles.operator' role
      security:
      - access token:
        - profile
  /records/extraction:
    post:
      tags:
      - Records
      summary: Extract records
      description: Extract records according to the specific provided config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtractionConfigDto'
      responses:
        "200":
          description: A List of all Records that matches the extraction config
          content:
            text/csv:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtractionResultDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtractionResultDto'
        "401":
          description: Account lacks 'roles.operator' role
      security:
      - access token:
        - profile
  /stats:
    get:
      tags:
      - Statistics
      summary: Get all backend generated statistics
      responses:
        "401":
          description: Account lacks 'roles.admin' role
        "200":
          description: StatBag representation of all available statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsBag'
      security:
      - access token:
        - profile
  /subjects:
    get:
      tags:
      - Subjects
      summary: Search subjects by name
      parameters:
      - name: name
        in: query
        description: "Pattern to use, use % as wildcard"
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
        example: a mysterious %
      responses:
        "200":
          description: The subject has been retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubjectDto'
        "401":
          description: Account lacks 'roles.operator' role
      security:
      - access token:
        - profile
    post:
      tags:
      - Subjects
      summary: Create new subject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubjectDto'
      responses:
        "200":
          description: The subject has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectDto'
        "401":
          description: Account lacks 'roles.operator' role
        "409":
          description: A subject with the same name already exists
      security:
      - access token:
        - profile
  /subjects/{id}:
    put:
      tags:
      - Subjects
      summary: Update subject
      parameters:
      - name: id
        in: path
        description: the subject id
        required: true
        schema:
          type: string
        example: 00000000-0000-0000-0000-000000000000
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubjectDto'
      responses:
        "200":
          description: The subject has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectDto'
        "401":
          description: Account lacks 'roles.operator' role
        "404":
          description: The subject has not been found
      security:
      - access token:
        - profile
  /subjects/{name}:
    get:
      tags:
      - Subjects
      summary: Get subject by name
      description: "If subject do not exists, send back an empty"
      parameters:
      - name: name
        in: path
        description: the subject id
        required: true
        schema:
          type: string
          nullable: false
        example: sheldon
      responses:
        "200":
          description: The subject has been retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectDto'
        "401":
          description: Account lacks 'roles.operator' role
        "404":
          description: The subject has not been found
      security:
      - access token:
        - profile
  /subjects/{subject}/records:
    get:
      tags:
      - Subjects
      summary: Get subject records
      parameters:
      - name: subject
        in: path
        description: the subject id
        required: true
        schema:
          type: string
        example: sheldon
      responses:
        "200":
          description: The subject records have been retrieved
        "401":
          description: Account lacks 'roles.operator' role
      security:
      - access token:
        - profile
  /system/config:
    get:
      tags:
      - System
      summary: Get the GUI configuration
      responses:
        "200":
          description: Configuration for GUI
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientConfig'
  /system/events:
    get:
      tags:
      - System
      summary: Get the GUI configuration
      parameters:
      - name: author
        in: query
        description: event author to query
        schema:
          type: string
      - name: direction
        in: query
        description: sort direction (asc/desc)
        schema:
          default: asc
          type: string
      - name: eventTypes
        in: query
        description: event types to query
        schema:
          type: array
          items:
            type: string
      - name: order
        in: query
        description: sort by
        schema:
          default: key
          type: string
      - name: page
        in: query
        description: page number to get
        schema:
          format: int32
          default: 0
          type: integer
      - name: size
        in: query
        description: page size
        schema:
          format: int32
          default: 25
          type: integer
      - name: sourceId
        in: query
        description: event source id to query
        schema:
          type: string
      - name: sourceTypes
        in: query
        description: event source types to query
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: System events list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionPageEventDto'
  /system/support/infos:
    get:
      tags:
      - System
      summary: "Get available service information (for now, only latest version is\
        \ operational)"
      responses:
        "204":
          description: Support service is disabled
        "200":
          description: Support service information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportInfo'
  /tokens:
    post:
      tags:
      - Tokens
      summary: Create Access token for API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessToken'
      responses:
        "200":
          description: The generated token
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: Account lacks 'roles.operator' role
      security:
      - access token:
        - profile
  /user:
    get:
      tags:
      - User
      summary: Get connected user information
      responses:
        "200":
          description: Information for the connected user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User1'
  /user/records:
    get:
      tags:
      - User
      summary: Get connected user records
      responses:
        "200":
          description: The users records
  /user/status:
    get:
      tags:
      - User
      summary: Get connected user status
      responses:
        "200":
          description: The users status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /webhooks:
    get:
      tags:
      - Webhook
      summary: Get the list of available webhooks
      responses:
        "200":
          description: The webhooks list has been retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebHook'
        "401":
          description: Account lacks 'roles.operator' role
    post:
      tags:
      - Webhook
      summary: Subscribe to a new webhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      responses:
        "201":
          description: The webhook has been subscribed to
        "401":
          description: Account lacks 'roles.operator' role
  /webhooks/{id}:
    get:
      tags:
      - Webhook
      summary: Get webhook by id
      parameters:
      - name: id
        in: path
        description: the webhook id
        required: true
        schema:
          type: string
          nullable: false
      responses:
        "200":
          description: The webhook has been retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        "401":
          description: Account lacks 'roles.operator' role
    put:
      tags:
      - Webhook
      summary: Update webhook by id
      parameters:
      - name: id
        in: path
        description: the webhook id
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      responses:
        "200":
          description: The webhook has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebHook'
        "401":
          description: Account lacks 'roles.operator' role
    delete:
      tags:
      - Webhook
      summary: Delete webhook by id
      parameters:
      - name: id
        in: path
        description: the webhook id
        required: true
        schema:
          type: string
          nullable: false
      responses:
        "204":
          description: The webhook has been unsubscribed from
        "401":
          description: Account lacks 'roles.operator' role
components:
  schemas:
    AccessToken:
      required:
      - subject
      - validity
      type: object
      properties:
        subject:
          description: The token subject or transaction
          type: string
          example: sheldon
          nullable: false
        scopes:
          description: The token allowed scopes
          type: array
          items:
            type: string
          example: "consent,preference,data"
        validity:
          description: "The token validity (format: PnYnMnDTnHnMnS - XML Schema 1.0\
            \ section 3.2.6.1)"
          default: PT4H
          type: string
          example: P2DT12H
          nullable: false
        expirationDelay:
          format: int64
          type: integer
    CacheKey:
      type: object
      properties:
        name:
          type: string
        locale:
          $ref: '#/components/schemas/Locale'
        moduleRef:
          $ref: '#/components/schemas/KeyElementReferenceModule'
        callerRef:
          $ref: '#/components/schemas/KeyElementReferenceModule'
        modulesHash:
          format: int32
          type: integer
        format:
          type: string
        loadTime:
          format: int64
          type: integer
        expirationTime:
          format: int64
          type: integer
        cause:
          type: object
        providers:
          $ref: '#/components/schemas/ServiceLoaderResourceBundleProvider'
        providersChecked:
          type: boolean
        callerHasProvider:
          type: boolean
        module:
          type: object
        callerModule:
          type: object
    ClientConfig:
      description: A representation of the client configuration
      type: object
      properties:
        language:
          description: Language used in data
          type: string
          readOnly: true
        userPageEnabled:
          description: Is user page need to be available
          type: boolean
          readOnly: true
        userPageElements:
          description: "Elements (processing, preferences, ...) that are available\
            \ on user page"
          type: array
          items:
            type: string
          readOnly: true
        rolesMapping:
          description: Roles mapping
          type: object
          additionalProperties:
            type: string
          readOnly: true
    CollectionPageEventDto:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/EventDto'
        page:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        totalPages:
          format: int32
          type: integer
        totalCount:
          format: int64
          type: integer
        limit:
          format: int32
          type: integer
        offset:
          format: int32
          type: integer
        size:
          format: int64
          type: integer
    CollectionPageModelEntryDto:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/ModelEntryDto'
        page:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        totalPages:
          format: int32
          type: integer
        totalCount:
          format: int64
          type: integer
        limit:
          format: int32
          type: integer
        offset:
          format: int32
          type: integer
        size:
          format: int64
          type: integer
    Confirmation:
      enum:
      - AUDIO_RECORD
      - DIGITAL_SIGNATURE
      - EMAIL_CODE
      - FORM_CODE
      - NONE
      - SIGNATURE
      - SMS_CODE
      - VIDEO_RECORD
      type: string
    ConsentContext:
      description: Consent form context object
      required:
      - subject
      type: object
      properties:
        subject:
          description: The customer unique identifier
          type: string
          example: sheldon
          nullable: false
        callback:
          description: Redirect URL after consent is given
          type: string
          example: http://www.fairandsmart.com
        iframeOrigin:
          description: "Parent window domain, necessary for callback"
          type: string
          example: http://www.fairandsmart.com
        language:
          description: Display language
          type: string
          example: fr
        origin:
          allOf:
          - $ref: '#/components/schemas/Origin'
          - description: Consent collection origin
            example: webform
        validity:
          description: "Consent lifetime (format: PnYnMnDTnHnMnS - XML Schema 1.0\
            \ section 3.2.6.1)"
          type: string
          example: P6M
        updatable:
          description: Consent can be updated
          type: boolean
          example: true
        cancellable:
          description: Consent can be cancelled
          type: boolean
          example: true
        silent:
          description: Silent Consent collect disable fetching existing values for
            the declared subject
          type: boolean
          example: false
        userinfos:
          description: "Information about the customer, mostly contact information\
            \ like email address or phone number"
          type: object
          additionalProperties:
            type: string
          example: "{'emailAddress': 'sheldon@domain.net'}"
        attributes:
          type: object
          additionalProperties:
            type: string
          example: {}
        layout:
          description: Consent form layout key to use
          type: string
          example: layout.001
        layoutData:
          allOf:
          - $ref: '#/components/schemas/FormLayout'
          - description: Consent form layout data to use
        author:
          description: The consent author (in case the consent is set by an operator)
          type: string
        confirmation:
          allOf:
          - $ref: '#/components/schemas/Confirmation'
          - description: This context will need a user confirmation to commit transaction
            example: NONE
        confirmationConfig:
          description: The confirmation context elements
          type: object
          additionalProperties:
            type: string
    ConsentTransaction:
      type: object
      properties:
        id:
          type: string
        subject:
          type: string
        state:
          type: string
        context:
          $ref: '#/components/schemas/ConsentContext'
        token:
          type: string
        task:
          format: uri
          type: string
        receipt:
          format: uri
          type: string
        breed:
          format: uri
          type: string
        cpp:
          format: uri
          type: string
    CounterDto:
      type: object
      properties:
        value:
          format: int64
          description: The counter value
          type: integer
          readOnly: true
        fromTimestamp:
          format: int64
          description: The timestamp to start counting
          type: integer
          readOnly: true
        toTimestamp:
          format: int64
          description: The timestamp to stop counting
          type: integer
          readOnly: true
    EnumerationString:
      type: object
    EventDto:
      description: Represents an event
      required:
      - author
      - eventType
      - sourceType
      - sourceId
      type: object
      properties:
        id:
          description: The event ID
          type: string
          readOnly: true
          example: 00000000-0000-0000-0000-000000000000
        author:
          description: The event author
          maxLength: 255
          minLength: 1
          type: string
          example: sheldon
          nullable: false
        eventType:
          description: The event type
          maxLength: 255
          minLength: 1
          type: string
          example: consent.submit
          nullable: false
        sourceType:
          description: The event source type
          minLength: 1
          type: string
          nullable: false
        sourceId:
          description: The event source id
          minLength: 1
          type: string
          nullable: false
        args:
          description: The event args
          type: object
          additionalProperties:
            type: string
    Extraction Config Condition:
      description: The extraction condition
      required:
      - key
      - value
      - regexpValue
      type: object
      properties:
        key:
          description: The element key to extract
          minLength: 1
          type: string
          example: processing.001
          nullable: false
        value:
          description: The value that need to match
          minLength: 1
          type: string
          example: accepted
          nullable: false
        regexpValue:
          description: is the value is a regular expression
          type: boolean
    ExtractionConfigDto:
      description: A Configuration for Record Extraction
      required:
      - condition
      type: object
      properties:
        condition:
          allOf:
          - $ref: '#/components/schemas/Extraction Config Condition'
          - description: The extraction condition
    ExtractionResultDto:
      description: A Record Extraction Result
      type: object
      properties:
        subjectId:
          description: The record subject id
          type: string
          readOnly: true
          example: 00000000-0000-0000-0000-000000000000
        subjectName:
          description: The record subject name (if present)
          type: string
          readOnly: true
          example: sheldon
        subjectEmail:
          description: The record subject email (if present)
          type: string
          readOnly: true
          example: sheldon@localhost
        recordKey:
          description: The record key
          type: string
          readOnly: true
          example: processing.001
        recordSerial:
          description: The record serial
          type: string
          readOnly: true
          example: "0000000"
        recordValue:
          description: The record value
          type: string
          readOnly: true
          example: accepted
    FormLayout:
      type: object
      properties:
        type:
          type: string
        info:
          type: string
        elements:
          type: array
          items:
            type: string
        theme:
          type: string
        notification:
          type: string
        orientation:
          $ref: '#/components/schemas/Orientation'
        existingElementsVisible:
          type: boolean
        validityVisible:
          type: boolean
        includeIFrameResizer:
          type: boolean
        acceptAllVisible:
          type: boolean
        acceptAllText:
          type: string
        submitText:
          type: string
        cancelVisible:
          type: boolean
        cancelText:
          type: string
        footerOnTop:
          type: boolean
    Key:
      description: An API Access Key that contains information needed for Http Basic
        Authentication
      type: object
      properties:
        id:
          description: The key unique id
          type: string
          readOnly: true
        name:
          description: The key name
          type: string
          example: Demo KEY
        password:
          description: The key to use in HttpBasic Auth (only visible at creation)
          type: string
          readOnly: true
        creationDate:
          format: int64
          description: The key creation timestamp
          type: integer
          readOnly: true
        lastAccessDate:
          format: int64
          description: The key last access timestamp
          type: integer
          readOnly: true
    KeyElementReferenceModule:
      type: object
      properties:
        cacheKey:
          $ref: '#/components/schemas/CacheKey'
    Locale:
      type: object
      properties:
        language:
          type: string
        script:
          type: string
        country:
          type: string
        variant:
          type: string
        extensionKeys:
          uniqueItems: true
          type: array
          items:
            format: byte
            type: string
        unicodeLocaleAttributes:
          uniqueItems: true
          type: array
          items:
            type: string
        unicodeLocaleKeys:
          uniqueItems: true
          type: array
          items:
            type: string
        iSO3Language:
          type: string
        iSO3Country:
          type: string
        displayLanguage:
          type: string
        displayScript:
          type: string
        displayCountry:
          type: string
        displayVariant:
          type: string
        displayName:
          type: string
    ModelData:
      type: object
      properties:
        type:
          type: string
    ModelEntryDto:
      required:
      - key
      - name
      - type
      type: object
      properties:
        id:
          type: string
        key:
          type: string
          nullable: false
        name:
          maxLength: 255
          minLength: 2
          type: string
          nullable: false
        description:
          maxLength: 2500
          type: string
        type:
          type: string
          nullable: false
        creationDate:
          format: int64
          type: integer
        modificationDate:
          format: int64
          type: integer
        status:
          $ref: '#/components/schemas/Status2'
        defaultLanguage:
          type: string
        availableLanguages:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        versions:
          type: array
          items:
            $ref: '#/components/schemas/ModelVersionDtoLight'
    ModelEntryExportDto:
      required:
      - key
      - name
      - type
      type: object
      properties:
        id:
          type: string
        key:
          type: string
          nullable: false
        name:
          maxLength: 255
          minLength: 2
          type: string
          nullable: false
        description:
          maxLength: 2500
          type: string
        type:
          type: string
          nullable: false
        creationDate:
          format: int64
          type: integer
        modificationDate:
          format: int64
          type: integer
        status:
          $ref: '#/components/schemas/Status2'
        defaultLanguage:
          type: string
        availableLanguages:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        versions:
          type: array
          items:
            $ref: '#/components/schemas/ModelVersionDto'
    ModelVersionDto:
      required:
      - data
      type: object
      properties:
        id:
          description: the version UUID
          type: string
          readOnly: true
        entry:
          description: the model entry UUID
          type: string
          readOnly: true
        serial:
          description: the version serial
          type: string
          readOnly: true
        parent:
          description: the previous version UUID
          type: string
          readOnly: true
        child:
          description: the next version child
          type: string
          readOnly: true
        author:
          description: the version author
          type: string
          readOnly: true
          example: demo
        defaultLanguage:
          description: the version default language
          type: string
          example: fr
        availableLanguages:
          description: the version default language
          type: array
          items:
            type: string
          example:
          - fr
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          - readOnly: true
        type:
          allOf:
          - $ref: '#/components/schemas/Type'
          - readOnly: true
        creationDate:
          format: int64
          description: the version creation date (epoch in millisec)
          type: integer
          readOnly: true
          example: 1609459200000
        modificationDate:
          format: int64
          description: the version last modification date (epoch in millisec)
          type: integer
          readOnly: true
          example: 1609459200000
        identifier:
          type: string
          readOnly: true
        data:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ModelData'
          nullable: false
    ModelVersionDtoLight:
      type: object
      properties:
        id:
          description: the version UUID
          type: string
          readOnly: true
        entry:
          description: the model entry UUID
          type: string
          readOnly: true
        serial:
          description: the version serial
          type: string
          readOnly: true
        parent:
          description: the previous version UUID
          type: string
          readOnly: true
        child:
          description: the next version child
          type: string
          readOnly: true
        author:
          description: the version author
          type: string
          readOnly: true
          example: demo
        defaultLanguage:
          description: the version default language
          type: string
          example: fr
        availableLanguages:
          description: the version default language
          type: array
          items:
            type: string
          example:
          - fr
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          - readOnly: true
        type:
          allOf:
          - $ref: '#/components/schemas/Type'
          - readOnly: true
        creationDate:
          format: int64
          description: the version creation date (epoch in millisec)
          type: integer
          readOnly: true
          example: 1609459200000
        modificationDate:
          format: int64
          description: the version last modification date (epoch in millisec)
          type: integer
          readOnly: true
          example: 1609459200000
        identifier:
          type: string
          readOnly: true
    ModelVersionStatusDto:
      required:
      - status
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          - nullable: false
    ModelVersionTypeDto:
      required:
      - type
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/Type'
          - nullable: false
    MultivaluedMapStringString:
      type: object
      additionalProperties:
        type: array
        items:
          type: string
    Notification Report:
      description: A Notification Report holds a status about a transaction notification
      type: object
      properties:
        transaction:
          description: The notification transaction id
          type: string
          readOnly: true
        creationTimestamp:
          format: int64
          description: The creation timestamp
          type: integer
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/Status1'
          - description: The notification status
            readOnly: true
        type:
          allOf:
          - $ref: '#/components/schemas/Type1'
          - description: The notification type
            readOnly: true
        explanation:
          description: A notification explanation giving more information about what
            happened
          type: string
          readOnly: true
    Orientation:
      description: display layout to use
      enum:
      - HORIZONTAL
      - VERTICAL
      type: string
      example: VERTICAL
    Origin:
      enum:
      - EMAIL
      - OPERATOR
      - RECEIPT
      - USER
      - WEBFORM
      type: string
    PreviewDto:
      type: object
      properties:
        preview:
          type: boolean
        language:
          type: string
        orientation:
          $ref: '#/components/schemas/Orientation'
        data:
          $ref: '#/components/schemas/ModelData'
        previewType:
          $ref: '#/components/schemas/PreviewType'
    PreviewType:
      enum:
      - EMAIL
      - FORM
      - RECEIPT
      type: string
    Record:
      description: A Record holds a single user consent or choice
      type: object
      properties:
        serial:
          description: The record serial composed of info and body serial
          type: string
          readOnly: true
        infoKey:
          description: The information model key
          type: string
          readOnly: true
        bodyKey:
          description: "The body model key (can be a processing, a preference or a\
            \ condition"
          type: string
          readOnly: true
        subject:
          description: The subject id that record belong to
          type: string
          readOnly: true
        creationTimestamp:
          format: int64
          description: The creation timestamp
          type: integer
          readOnly: true
        expirationTimestamp:
          format: int64
          description: The expiration timestamp
          type: integer
          readOnly: true
        type:
          description: The record type
          type: string
          readOnly: true
        value:
          description: The user value
          type: string
          readOnly: true
        status:
          description: The record status after evaluation
          type: string
          readOnly: true
        statusExplanation:
          description: The record evaluation explanation
          type: string
          readOnly: true
        origin:
          description: The collection origin of that record
          type: string
          readOnly: true
        comment:
          description: A comment added to the record
          type: string
          readOnly: true
        transaction:
          description: The record transaction id (used also as the receipt id)
          type: string
          readOnly: true
        notificationReports:
          description: A list of NotificationReport holding notification status
          type: array
          items:
            $ref: '#/components/schemas/Notification Report'
          readOnly: true
    ResourceBundle:
      type: object
      properties:
        parent:
          $ref: '#/components/schemas/ResourceBundle'
        locale:
          $ref: '#/components/schemas/Locale'
        name:
          type: string
        expired:
          type: boolean
        cacheKey:
          $ref: '#/components/schemas/CacheKey'
        keySet:
          uniqueItems: true
          type: array
          items:
            type: string
        baseBundleName:
          type: string
        keys:
          $ref: '#/components/schemas/EnumerationString'
    ResourceBundleProvider:
      type: object
    ServiceLoaderResourceBundleProvider:
      type: array
      items:
        $ref: '#/components/schemas/ResourceBundleProvider'
    State:
      enum:
      - COMMITTED
      - DELETED
      - NOTFOUND
      - PENDING
      type: string
    StatsBag:
      allOf:
      - $ref: '#/components/schemas/StatsBag'
      - description: Map that contains all named StatsCharts.
    StatsChart:
      allOf:
      - $ref: '#/components/schemas/StatsChart'
      - description: Map that contains all named StatsData.
    StatsData:
      description: Map that holds all StatsCharts data.
      type: object
      properties:
        datasets:
          type: array
          items:
            $ref: '#/components/schemas/StatsDataSet'
        labels:
          type: array
          items:
            type: string
    StatsDataSet:
      type: object
      properties:
        label:
          type: string
        data:
          type: array
          items:
            type: object
    Status:
      description: |-
        the version status :
        - DRAFT : will replace an ACTIVE version when finished,
        - ACTIVE : in use,
        - ARCHIVED : has been replaced by another ACTIVE version
      enum:
      - ACTIVE
      - ARCHIVED
      - DRAFT
      type: string
    Status1:
      enum:
      - DELIVERED
      - ERROR
      - INVALID_RECIPIENT
      - MAILBOX_FULL
      - NONE
      - OPENED
      - PENDING
      - SENT
      type: string
    Status2:
      enum:
      - ACTIVE
      - DELETED
      - INACTIVE
      type: string
    SubjectDto:
      description: Represents a subject
      required:
      - name
      type: object
      properties:
        id:
          description: The subject ID
          type: string
          readOnly: true
          example: 00000000-0000-0000-0000-000000000000
        name:
          description: The subject name
          maxLength: 255
          minLength: 1
          type: string
          example: sheldon
          nullable: false
        emailAddress:
          description: The subject email address
          type: string
          example: sheldon@localhost
        creationTimestamp:
          format: int64
          description: The subject creation date (epoch with millisec)
          type: integer
          readOnly: true
          example: 1609459200000
        defaultLanguage:
          description: The subject default language
          type: string
          example: en
    SupportInfo:
      description: A representation of available support info
      type: object
      properties:
        status:
          description: The support configuration status (enabled or disabled)
          type: string
          readOnly: true
        latestVersion:
          description: The latest version available)
          type: string
          readOnly: true
        currentVersion:
          description: The current running version
          type: string
          readOnly: true
    TemplateModel:
      type: object
      properties:
        template:
          type: string
        language:
          type: string
        bundle:
          $ref: '#/components/schemas/ResourceBundle'
        data:
          type: object
    Type:
      description: "the version type : use MINOR for typo fixes, MAJOR in other cases"
      enum:
      - MAJOR
      - MINOR
      type: string
    Type1:
      enum:
      - EMAIL
      - FCM
      - NONE
      - SMS
      - XMPP
      type: string
    User:
      description: A representation of connected user status
      type: object
      properties:
        username:
          description: The username
          type: string
          readOnly: true
        infos:
          $ref: '#/components/schemas/ModelEntryDto'
        entries:
          type: array
          items:
            $ref: '#/components/schemas/ModelEntryDto'
        records:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Record'
    User1:
      description: A representation of connected user information
      type: object
      properties:
        username:
          description: The username
          type: string
          readOnly: true
        admin:
          description: Is user in 'admin' group ?
          type: boolean
          readOnly: true
        operator:
          description: Is user in 'operator' group ?
          type: boolean
          readOnly: true
    WebHook:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        targetUrl:
          type: string
        subscribedActions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/WebHookAction'
    WebHookAction:
      enum:
      - CONSENT_COMMIT
      type: string
    WebHookDelivery:
      type: object
      properties:
        id:
          type: string
        sourceId:
          type: string
        webhookId:
          type: string
        redelivery:
          type: boolean
        deliveredAt:
          type: string
        duration:
          type: string
        status:
          type: string
        statusCode:
          format: int32
          type: integer
        action:
          $ref: '#/components/schemas/WebHookAction'
    Webhook:
      description: A representation of a webhook
      type: object
      properties:
        id:
          description: The webhook id
          type: string
        name:
          description: The name
          type: string
        targetUrl:
          description: The target URL
          type: string
        subscribedActions:
          description: The actions watched by the webhook
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/WebHookAction'
        delivery:
          description: The delivery report
          type: array
          items:
            $ref: '#/components/schemas/WebHookDelivery'
  securitySchemes:
    access token:
      type: oauth2
      description: access token from the auth server
      flows:
        implicit:
          authorizationUrl: http://localhost:4285/auth/realms/RightConsents/protocol/openid-connect/auth
